generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  firebaseUid String?   @unique
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  name        String?
  password    String?
  createdAt   DateTime  @default(now())
  receipts    Receipt[] // Add this relation field
}

model Receipt {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId // Add this relation scalar field
  user            User          @relation(fields: [userId], references: [id]) // Add this relation
  subtotal        Float
  tax             Float
  tip             Float
  total           Float
  items           Item[]
  participants    Participant[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isFullyAssigned Boolean       @default(false)
}

model Item {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  receiptId    String       @db.ObjectId
  receipt      Receipt      @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  description  String
  quantity     Float
  price        Float
  isMultiplied Boolean      @default(false)
  assignments  Assignment[]
}

model Participant {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  receiptId   String       @db.ObjectId
  receipt     Receipt      @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  name        String
  assignments Assignment[]
}

model Assignment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  itemId        String      @db.ObjectId
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  participantId String      @db.ObjectId
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  amount        Float
}
